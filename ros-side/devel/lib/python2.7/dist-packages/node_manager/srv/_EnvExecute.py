# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from node_manager/EnvExecuteRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import node_manager.msg

class EnvExecuteRequest(genpy.Message):
  _md5sum = "c8ce2aa862d8aeb4492c1226ca98bdd9"
  _type = "node_manager/EnvExecuteRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Reaction reaction
string robot_id

================================================================================
MSG: node_manager/Reaction
int64 vx
"""
  __slots__ = ['reaction','robot_id']
  _slot_types = ['node_manager/Reaction','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       reaction,robot_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EnvExecuteRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.reaction is None:
        self.reaction = node_manager.msg.Reaction()
      if self.robot_id is None:
        self.robot_id = ''
    else:
      self.reaction = node_manager.msg.Reaction()
      self.robot_id = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_q.pack(self.reaction.vx))
      _x = self.robot_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.reaction is None:
        self.reaction = node_manager.msg.Reaction()
      end = 0
      start = end
      end += 8
      (self.reaction.vx,) = _struct_q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_id = str[start:end].decode('utf-8')
      else:
        self.robot_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_q.pack(self.reaction.vx))
      _x = self.robot_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.reaction is None:
        self.reaction = node_manager.msg.Reaction()
      end = 0
      start = end
      end += 8
      (self.reaction.vx,) = _struct_q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_id = str[start:end].decode('utf-8')
      else:
        self.robot_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_q = struct.Struct("<q")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from node_manager/EnvExecuteResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import node_manager.msg

class EnvExecuteResponse(genpy.Message):
  _md5sum = "7a585643b7376f76d182f9c4487be9be"
  _type = "node_manager/EnvExecuteResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Properties properties


================================================================================
MSG: node_manager/Properties
Position position
float32 radius
string type

================================================================================
MSG: node_manager/Position
float32 x
float32 y
"""
  __slots__ = ['properties']
  _slot_types = ['node_manager/Properties']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       properties

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EnvExecuteResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.properties is None:
        self.properties = node_manager.msg.Properties()
    else:
      self.properties = node_manager.msg.Properties()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.properties.position.x, _x.properties.position.y, _x.properties.radius))
      _x = self.properties.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.properties is None:
        self.properties = node_manager.msg.Properties()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.properties.position.x, _x.properties.position.y, _x.properties.radius,) = _struct_3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.properties.type = str[start:end].decode('utf-8')
      else:
        self.properties.type = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.properties.position.x, _x.properties.position.y, _x.properties.radius))
      _x = self.properties.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.properties is None:
        self.properties = node_manager.msg.Properties()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.properties.position.x, _x.properties.position.y, _x.properties.radius,) = _struct_3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.properties.type = str[start:end].decode('utf-8')
      else:
        self.properties.type = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f = struct.Struct("<3f")
class EnvExecute(object):
  _type          = 'node_manager/EnvExecute'
  _md5sum = '57894eb0b15cbedc08e6487c6e2e5c4d'
  _request_class  = EnvExecuteRequest
  _response_class = EnvExecuteResponse
