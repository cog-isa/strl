// Generated by gencpp from file node_manager/Properties.msg
// DO NOT EDIT!


#ifndef NODE_MANAGER_MESSAGE_PROPERTIES_H
#define NODE_MANAGER_MESSAGE_PROPERTIES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <node_manager/Position.h>

namespace node_manager
{
template <class ContainerAllocator>
struct Properties_
{
  typedef Properties_<ContainerAllocator> Type;

  Properties_()
    : position()
    , radius(0.0)
    , type()  {
    }
  Properties_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , radius(0.0)
    , type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::node_manager::Position_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _radius_type;
  _radius_type radius;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;




  typedef boost::shared_ptr< ::node_manager::Properties_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::node_manager::Properties_<ContainerAllocator> const> ConstPtr;

}; // struct Properties_

typedef ::node_manager::Properties_<std::allocator<void> > Properties;

typedef boost::shared_ptr< ::node_manager::Properties > PropertiesPtr;
typedef boost::shared_ptr< ::node_manager::Properties const> PropertiesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::node_manager::Properties_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::node_manager::Properties_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace node_manager

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'node_manager': ['/home/artsobes/Documents/Development/ROS/catkin_ws/src/node_manager/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::node_manager::Properties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::node_manager::Properties_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::node_manager::Properties_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::node_manager::Properties_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::node_manager::Properties_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::node_manager::Properties_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::node_manager::Properties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c07079f3a4d9b76313d2b3866666f99";
  }

  static const char* value(const ::node_manager::Properties_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c07079f3a4d9b76ULL;
  static const uint64_t static_value2 = 0x313d2b3866666f99ULL;
};

template<class ContainerAllocator>
struct DataType< ::node_manager::Properties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "node_manager/Properties";
  }

  static const char* value(const ::node_manager::Properties_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::node_manager::Properties_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Position position\n\
float32 radius\n\
string type\n\
\n\
================================================================================\n\
MSG: node_manager/Position\n\
float32 x\n\
float32 y\n\
";
  }

  static const char* value(const ::node_manager::Properties_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::node_manager::Properties_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.radius);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Properties_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::node_manager::Properties_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::node_manager::Properties_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::node_manager::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NODE_MANAGER_MESSAGE_PROPERTIES_H
