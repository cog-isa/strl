// Generated by CoffeeScript 1.7.1
(function() {
  var animate, checkClass, onTransition;

  alight.animate = animate = {};

  animate.active = true;

  animate.namespace = 'al';


  /*
      element
      conf
          callback
          start: add[], remove[]
          process: add[], remove[]
          finish: add[], remove[]
   */

  animate.perform = (function() {
    var tolist;
    tolist = function(x) {
      if (!x) {
        return [];
      }
      if (f$.isArray(x)) {
        return x;
      }
      return [x];
    };
    return function(el, conf) {
      var apply, data, prev;
      data = alight.utilits.dataByElement(el, 'animate');
      if (data.prev) {
        data.prev.finish();
      }
      apply = function(d) {
        var n, _i, _j, _len, _len1, _ref, _ref1, _results;
        if (!d) {
          return;
        }
        _ref = tolist(d.add);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          f$.addClass(el, n);
        }
        _ref1 = tolist(d.remove);
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          n = _ref1[_j];
          _results.push(f$.removeClass(el, n));
        }
        return _results;
      };
      data.prev = prev = {
        finish: function() {
          data.prev = null;
          prev.finish = null;
          apply(conf.finish);
          if (conf.callback) {
            return conf.callback();
          }
        }
      };
      apply(conf.start);
      return alight.nextTick(function() {
        onTransition(el, function() {
          if (prev.finish) {
            return prev.finish();
          }
        });
        return apply(conf.process);
      });
    };
  })();

  animate.show = function(el, callback) {
    return animate.perform(el, {
      callback: callback,
      start: {
        add: "" + animate.namespace + "-hide-remove",
        remove: "al-hide"
      },
      process: {
        add: "" + animate.namespace + "-hide-remove-active"
      },
      finish: {
        remove: ["" + animate.namespace + "-hide-remove", "" + animate.namespace + "-hide-remove-active"]
      }
    });
  };

  animate.hide = function(el, callback) {
    return animate.perform(el, {
      callback: callback,
      start: {
        add: "" + animate.namespace + "-hide-add"
      },
      process: {
        add: "" + animate.namespace + "-hide-add-active"
      },
      finish: {
        add: "al-hide",
        remove: ["" + animate.namespace + "-hide-add", "" + animate.namespace + "-hide-add-active"]
      }
    });
  };

  animate.enter = function(el, callback) {
    return animate.perform(el, {
      callback: callback,
      start: {
        add: "" + animate.namespace + "-enter"
      },
      process: {
        add: "" + animate.namespace + "-enter-active"
      },
      finish: {
        remove: ["" + animate.namespace + "-enter", "" + animate.namespace + "-enter-active"]
      }
    });
  };

  animate.leave = function(el, callback) {
    return animate.perform(el, {
      callback: callback,
      start: {
        add: "" + animate.namespace + "-leave"
      },
      process: {
        add: "" + animate.namespace + "-leave-active"
      }
    });
  };

  animate.$classExists = function(css) {
    var rule, style, t, _i, _j, _len, _len1, _ref, _ref1;
    _ref = document.styleSheets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      style = _ref[_i];
      if (!style.rules) {
        continue;
      }
      _ref1 = style.rules;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        rule = _ref1[_j];
        t = ' ' + rule.selectorText + ',';
        if (t.indexOf(' ' + css + ',') >= 0) {
          return true;
        }
      }
    }
    return false;
  };

  onTransition = (function() {
    var transitionEvent;
    transitionEvent = (function() {
      var el, k, transitions, v;
      el = document.createElement('div');
      transitions = {
        'transition': 'transitionend',
        'OTransition': 'oTransitionEnd',
        'MozTransition': 'transitionend',
        'WebkitTransition': 'webkitTransitionEnd'
      };
      for (k in transitions) {
        v = transitions[k];
        if (el.style[k] !== void 0) {
          return v;
        }
      }
      return null;
    })();
    return function(el, callback) {
      var dur, fn, t;
      dur = window.getComputedStyle(el).transitionDuration;
      dur = parseFloat(dur) * 1000 + 100;
      fn = function() {
        clearTimeout(t);
        el.removeEventListener(transitionEvent, fn, false);
        return callback(el);
      };
      el.addEventListener(transitionEvent, fn, false);
      return t = setTimeout(fn, dur);
    };
  })();

  checkClass = function(env, suffix) {
    var className, n, _i, _len, _ref;
    className = env.takeAttr('class');
    if (className) {
      _ref = className.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        if (animate.$classExists("." + n + "." + animate.namespace + "-" + suffix)) {
          return true;
        }
      }
    }
    return false;
  };

  (function() {
    var dshow;
    dshow = alight.directives.al.show;
    return alight.directives.al.show = function(el, exp, scope, env) {
      var dir;
      dir = dshow.apply(this, arguments);
      if (animate.active && checkClass(env, 'hide-remove')) {
        dir.showDom = function() {
          return animate.show(el);
        };
        dir.hideDom = function() {
          return animate.hide(el);
        };
      }
      return dir;
    };
  })();

  (function() {
    var rinit;
    rinit = alight.directives.al.repeat.init;
    return alight.directives.al.repeat.init = function(el, exp, scope, env) {
      var dir;
      dir = rinit.apply(this, arguments);
      if (animate.active && checkClass(env, 'enter')) {
        dir.rawUpdateDom = function(removes, inserts) {
          var e, it, _fn, _i, _j, _len, _len1, _results;
          _fn = function(el) {
            return animate.leave(el, function() {
              return f$.remove(el);
            });
          };
          for (_i = 0, _len = removes.length; _i < _len; _i++) {
            e = removes[_i];
            _fn(e);
          }
          _results = [];
          for (_j = 0, _len1 = inserts.length; _j < _len1; _j++) {
            it = inserts[_j];
            f$.after(it.after, it.element);
            _results.push(animate.enter(it.element));
          }
          return _results;
        };
      }
      return dir;
    };
  })();

  (function() {
    var rinit;
    rinit = alight.directives.al.include.init;
    return alight.directives.al.include.init = function(el, exp, scope, env) {
      var dir;
      dir = rinit.apply(this, arguments);
      if (animate.active && checkClass(env, 'enter')) {
        dir.removeDom = function(element) {
          return animate.leave(element, function() {
            return f$.remove(element);
          });
        };
        dir.insertDom = function(base, element) {
          f$.after(base, element);
          return animate.enter(element);
        };
      }
      return dir;
    };
  })();

  (function() {
    var rinit;
    rinit = alight.directives.al["if"].init;
    return alight.directives.al["if"].init = function(el, exp, scope, env) {
      var dir;
      dir = rinit.apply(this, arguments);
      if (animate.active && checkClass(env, 'enter')) {
        dir.removeDom = function(element) {
          return animate.leave(element, function() {
            return f$.remove(element);
          });
        };
        dir.insertDom = function(base, element) {
          f$.after(base, element);
          return animate.enter(element);
        };
      }
      return dir;
    };
  })();

}).call(this);

//# sourceMappingURL=animate.map
